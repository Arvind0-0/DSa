class Solution {
    static int firingEmployees(int arr[], int n) { 
        // code here
        ArrayList<ArrayList<Integer>> adjList = new ArrayList<ArrayList<Integer>> ();
        // 1,2... node bcoz ranks are 1 ordering
        for(int i=0; i<=n; ++i){
            adjList.add(new ArrayList<Integer>());
        }
        int source = 0;// founder
        for(int i=0; i<n; ++i){
            int rank1 = i+1;
            int rank2 = arr[i];
            // rank2 is superiot to rank1, so connect them
            adjList.get(rank1).add(rank2);
            adjList.get(rank2).add(rank1);
            if(rank2 == 0){
                // founder
                source = i+1;
            }
        }
        // do bfs from founder and calculate the no of seniors on go and fire accordingly
        int[] visited = new int[n+1];
        int ans = bfs(source,-1,n,visited,adjList);
        return ans;
        
    } 
    static int bfs(int source,int par,int n, int[] visited, ArrayList<ArrayList<Integer>> adjList){
        Queue<Integer> q = new ArrayDeque<Integer>();
        q.add(source);
        visited[source] = 1;
        int cnt = 1;
        int res = 0;
        int MAXN = 2*n+1;
        int[] prime = new int[MAXN];
        Arrays.fill(prime,1);
        //seive
        prime[1] = prime[0] = 0;
        for(int i=2; i<MAXN; ++i){
            if(prime[i] == 1){
                for(int j=2*i; j<MAXN; j+=i){
                    prime[j] = 0;
                }
            }
        }
        while(!q.isEmpty()){
            int m = q.size();
            for(int i=0; i<m; ++i){
                int u = q.poll();
                for(Integer v:adjList.get(u)){
                    if(visited[v] == 0){
                        q.add(v);
                        visited[v] = 1;
                        int sum = v+cnt;
                        if(prime[sum] == 1){
                            res += 1;
                        }
                    }
                }
            }
            cnt += 1;
        }
        return res;
    }
