class Solution
{
    public int isNegativeWeightCycle(int n, int[][] edges)
    {
        //code here
        if (edges == null || n == 0) {
            return 0;
        }
        int [] distance = new int [n];
        Arrays.fill(distance, Integer.MAX_VALUE);
        distance[0] = 0;
        // n - 1 number of relaxation steps
        for (int i = 1; i <= n - 1; i++) {
            for (int [] edge : edges) {
                int source = edge[0];
                int destination = edge[1];
                int weight = edge[2];
                // condition
                if (distance[source] != Integer.MAX_VALUE && distance[source] + 
                weight < distance[destination]) {
                    distance[destination] = distance[source] + weight;
                }
            }
        }
        // relaxation step once more to make sure about the negative cycle
        for (int [] edge : edges) {
            int source = edge[0];
            int destination = edge[1];
            int weight = edge[2];
            if (distance[source] != Integer.MAX_VALUE && distance[source] + 
            weight < distance[destination]) {
                // there is a negative cycle as distance will get updated
                return 1;
            }
        }
        return 0;
    }
}
